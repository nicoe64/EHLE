#include "stm32f4xx.h"
#include "_mcpr_stm32f407.h"
#include <inttypes.h>
#include <stdio.h>
#include <math.h>
#include "display.h"

void u_derlay(int usec);
void LCD_Output16BitWord(uint16_t data);
void LEDs_InitPorts(void);
void LEDs_Write(uint16_t data);
void Init_Timer(void);
void Blinky(void);
void Lauflicht(void);


void u_delay(int usec){
	int i;
	int j = 3150000;
	
	for(i = 0; i< usec * j; i++){
	}		
}

void  LCD_Output16BitWord(uint16_t data){
    // Declare mask variable
    uint16_t mask;

    // Bits 0 and 1 of data to Port D bits 14 and 15
    mask =  (0x3) << 14;
    GPIOD->ODR &= ~mask; // clear bits 
    mask = (data & 0x3) << 14; 
    GPIOD->ODR |= mask; // set bits
    
    // Bits 2 and 3 of data to Port D bits 0 and 1
    mask = 0x000C >> 2;
    GPIOD->ODR &= ~mask; // clear bits
    mask = (data & 0x000C) >> 2;
    GPIOD->ODR |= mask; // set bits
    
    // Bits 4 to 12 of data to Port E bits 7 to 15
    mask = 0x1FF0 << 3;
    GPIOE->ODR &= ~mask; // clear bits
    mask = (data & 0x1FF0) << 3;
    GPIOE->ODR |= mask; // set bits

    
    // Bits 13 to 15 of data to Port D bits 8 to 10
    mask = 0xE000 >> 5;
    GPIOD->ODR &= ~mask; // clear bits
    mask = (data & 0xE000) >> 5;
    GPIOD->ODR |= mask; // set bits

return;
}


int ms= 0;
int a = 0;
char str[16
	];
void LEDs_InitPorts(){
	
	// Peripheral GPIOD einschalten
	RCC->AHB1ENR |= 1<<3|1;
	
	// Peripheral GPIOD einschalten
	RCC->AHB1ENR |= 1<<4;
	
	//LEDS GPIOD
	GPIOD->MODER |=0x50554405;
	
	//LEDS GPIOE
	GPIOE->MODER |=0x55554000;
	
	// PD11 auf 1 wegen daartenverkehr mit LEDs
	GPIOD->ODR |= 1<<11;
	
	// Orange LED/Display Background (Port D13/12) auf Ausgang schalten
	GPIOD->MODER |= 0x05000000; //1<<26;
}
void LEDs_Write(uint16_t data){
	//Vorbereiten der Datenkanaele zum einschalten der LEDs
    //PD7
    GPIOD->ODR |= 1<<7;
    //PD5
    GPIOD->ODR |= 1<<5;
    
    LCD_Output16BitWord(data);
    
    //Auf Ausgangsposition zurück 
		//LEDs sind eingeschaltet müssen nicht weiter beschrieben werden
    //PD5 und PD7 wieder auf 0
        GPIOD->ODR &= 0xFF5F;

}

void TIM7_IRQHandler(){
	TIM7->SR &= ~(1u << 0);
	ms++;
	a++;
}
void Init_Timer(){
	//Takt einschalten
	RCC->APB1ENR |= 1<<5;
	
	
	TIM7->DIER |=(1<<0);
	NVIC_SetPriority(TIM7_IRQn, 10);
	NVIC_EnableIRQ(TIM7_IRQn);
	
	TIM7->CR1 |= 1u<<0;

	//Prescaler
	TIM7->PSC = 84 -1;
	//Auto Reload Register
	TIM7->ARR = 1000 -1;
}

void Blinky(void){ 
	if (((int)(ms/500)%2) == 1){
			GPIOD->ODR |= 1<<12; 
}else{
			GPIOD->ODR &= 0xEFFF; //~(1<<13); // ~(1<<12); 
		}

}

void Lauflicht(void){
				// Licht läuft durch        
        for(int i = 0; i < 16; i++){
            uint16_t data = 0;
            data |= 1 << i;
            LEDs_Write(data);
                        u_delay(1);
        }        
        
        // kein Licht läuft durch
        for(int i = 0; i < 16; i++){
            uint16_t data = 0;
            data |= 1 << i;
            LEDs_Write(~data);
                        u_delay(1);
        }
}
	
int main(void)
{    
	mcpr_SetSystemCoreClock();
	
	Init_Timer();
	
  LEDs_InitPorts();
	
	LCD_Init();
	
    LCD_ClearDisplay( 0xFE00 );
	
    while( 1 ) {
			a = 0;
		int w;
		if( (GPIOA->IDR & 1) != 0) {
		//HintergrundBeleuchtung
		GPIOD->ODR |= 1<<13; 
		Blinky();
			w = ms;
		}
		
		sprintf(str, "%d", ms);   
		// LCD_ClearDisplay( 0xFE00 );      
		LCD_WriteString( 10, 10, 0xFFFF, 0x0000, str);
			
		if (ms - w >= 10000){
			GPIOD->ODR &= 0xCFFF;
			ms = 0;
		}
		while (a < 50){
    }
        
		}
}
